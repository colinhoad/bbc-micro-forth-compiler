   10 REM Filename:FROTH
   20 
   30 REM Hybrid FORTH
   40 
   50 REM (c) 1983 Jeremy Ruston
   60 
   70 MAXCO%=3000:REM Code size
   80 MAXST%=50*2:REM Stack size
   90 MAXDC%=1000:REM Dictionary size
  100 
  110 PROCinit
  120 ON ERROR REPORT:PRINT " at line ";ERL:BUF$="":IF ERR=17 THEN END ELSE GOTO 140
  130 PROClibrary
  140 REPEAT
  150   PROCprocess
  160 UNTIL FALSE
  170 
  180 DEF PROCinit
  190 LOCAL A%,B%,C%
  200 DIM A% MAXCO%,B% MAXST%,C% MAXDC%
  210 AC1%=&50:REM Accumulator
  220 AC2%=&52:REM Accumulator
  230 AC3%=&54:REM Accumulator
  240 STS%=&56:REM Stack start
  250 STE%=&58:REM Stack end
  260 STP%=&5A:REM Stack pointer
  270 !STS%=B%
  280 !STE%=B%+MAXST%-1
  290 !STP%=B%
  300 CDS%=A%:REM Code start
  310 CDE%=A%+MAXCO%-1:REM Code end
  320 CDP%=A%:REM Code pointer
  330 DCS%=C%:REM Dictionary start
  340 DCE%=C%+MAXDC%-1:REM Dictionary end
  350 DCP%=C%:REM Dictionary pointer
  360 BUF$=STRING$(255,"*")
  370 ENDPROC
  380 
  390 DEF PROCerror(A$)
  400 $P%=CHR$(0)+CHR$(100)+A$+CHR$(0)
  410 P%=P%+LEN(A$)+3
  420 ENDPROC
  430 
  440 DEF PROClibrary
  450 LOCAL O%,P%,A$,A%
  460 FOR O%=0 TO 2 STEP 2
  470   P%=CDP%
  480   [OPT O%
  490   
  500   .PUSH1%
  510   LDA AC1%:LDY #0:STA (STP%),Y:INY:LDA AC1%+1:STA (STP%),Y
  520   .aa LDA STP%:CLC:ADC #2:STA STP%:LDA STP%+1:ADC #0:STA STP%+1
  530   CMP STE%+1:BNE bb:LDA STP%:CMP STE%:BNE bb
  540   ]:PROCerror("Stack overflow"):[OPT O%
  550   .bb RTS
  560   
  570   .PUSH2%
  580   LDA AC2%:LDY #0:STA (STP%),Y:INY:LDA AC2%+1:STA (STP%),Y
  590   JMP aa
  600   
  610   .PULL1%
  620   LDA STP%:CMP STS%:BNE cc:LDA STP%+1:CMP STS%+1:BNE cc
  630   ]:PROCerror("Stack underflow"):[OPT O%
  640   .cc LDA STP%:SEC:SBC #2:STA STP%:LDA STP%+1:SBC #0:STA STP%+1
  650   LDY #0:LDA (STP%),Y:STA AC1%:INY:LDA (STP%),Y:STA AC1%+1:RTS
  660   
  670   .PULL2%
  680   LDA STP%:CMP STS%:BNE dd:LDA STP%+1:CMP STS%+1:BNE dd
  690   ]:PROCerror("Stack underflow"):[OPT O%
  700   .dd LDA STP%:SEC:SBC #2:STA STP%:LDA STP%+1:SBC #0:STA STP%+1
  710   LDY #0:LDA (STP%),Y:STA AC2%:INY:LDA (STP%),Y:STA AC2%+1:RTS
  720   
  730   .NTRUE%
  740   LDA #&FF:STA AC1%:STA AC1%+1:JMP PUSH1%
  750   
  760   .NFALSE%
  770   LDA #0:STA AC1%:STA AC1%+1:JMP PUSH1%
  780   
  790   .EQUAL%
  800   JSR PULL1%:JSR PULL2%:LDA AC1%:CMP AC2%:BNE NFALSE%:LDA AC1%+1:CMP AC2%+1:BNE NFALSE%:JMP NTRUE%
  810   
  820   .NEQUAL%
  830   JSR PULL1%:JSR PULL2%:LDA AC1%:CMP AC2%:BNE NTRUE%:LDA AC1%+1:CMP AC2%+1:BNE NTRUE%:JMP NFALSE%
  840   
  850   .GREATER%
  860   JSR COMPARE%:BMI NTRUE%:JMP NFALSE%
  870   
  880   .LESS%
  890   JSR COMPARE%:BMI NFALSE%:BEQ NFALSE%:JMP NTRUE%
  900   
  910   .LE_EQ%
  920   JSR COMPARE%:BPL NFALSE%:JMP NTRUE%
  930   
  940   .GR_EQ%
  950   JSR COMPARE%:BEQ NTRUE%:BMI NTRUE%:JMP NFALSE%
  960   
  970   .COMPARE%
  980   JSR PULL1%:JSR PULL2%
  990   LDA AC1%:CMP AC2%:BEQ DEQUAL%
 1000   LDA AC1%+1:SBC AC2%+1:ORA #1:BVS DOVFLOW%:RTS
 1010   .DEQUAL% LDA AC1%+1:SBC AC2%+1:BVS DOVFLOW%:RTS
 1020   .DOVFLOW% EOR #&80:ORA #1:RTS
 1030   
 1040   .ADD%
 1050   JSR PULL1%:JSR PULL2%:LDA AC1%:CLC:ADC AC2%:STA AC1%
 1060   LDA AC1%+1:ADC AC2%+1:STA AC1%+1:JMP PUSH1%
 1070   
 1080   .SUBTRACT%
 1090   JSR PULL1%:JSR PULL2%:LDA AC2%:SEC:SBC AC1%:STA AC1%
 1100   LDA AC2%+1:SBC AC1%+1:STA AC1%+1:JMP PUSH1%
 1110   
 1120   .OUT%
 1130   JSR PULL1%:LDA AC1%+1:BPL ee
 1140   LDA #ASC"-":JSR &FFEE:LDA #0:SEC:SBC AC1%:STA AC1%:LDA #0:SBC AC1%+1:STA AC1%+1
 1150   .ee LDY #0:.ff LDX #16:LDA #0:.gg ASL (AC1%):ROL (AC1%+1):ROL A:CMP #10:BCC hh:SBC #10:INC AC1%:.hh DEX
 1160   BNE gg:PHA:INY:LDA AC1%+1:ORA AC1%:BNE ff:.ii PLA:CLC:ADC #&30:JSR &FFEE:DEY:BNE ii:RTS
 1170   
 1180   .MULT%
 1190   JSR PULL1%:JSR PULL2%:LDA #0:STA AC3%:STA AC3%+1
 1200   LDX #16:.jj ASL (AC3%):ROL (AC3%+1):ASL (AC2%):ROL (AC2%+1):BCC kk:LDA AC1%:CLC:ADC AC3%:STA AC3%
 1210   LDA AC1%+1:ADC AC3%+1:STA AC3%+1:.kk DEX:BNE jj:LDA AC3%:STA AC1%:LDA AC3%+1:STA AC1%+1:JMP PUSH1%
 1220   
 1230   .NABS%
 1240   JSR PULL1%:LDA AC1%+1:BPL ll:LDA #0:SEC:SBC AC1%:STA AC1%:LDA #0:SBC AC1%+1:STA AC1%+1:.ll JMP PUSH1%
 1250   
 1260   .SDIVMD%
 1270   JSR PULL1%:JSR PULL2%:LDA AC2%:STA AC3%:LDA AC2%+1:STA AC3%+1
 1280   LDA AC3%+1:EOR AC1%+1:STA &90:LDA AC3%+1:STA &91
 1290   LDA AC1%+1:BPL CHKDE:LDA #0:SEC:SBC AC1%:STA AC1%:LDA #0:SBC AC1%+1:STA AC1%+1
 1300   .CHKDE LDA AC3%+1:BPL DODIV:LDA #0:SEC:SBC AC3%:STA AC3%:LDA #0:SBC AC3%+1:STA AC3%+1
 1310   .DODIV JSR UDIV:BCS EREXIT:LDA &90:BPL DOREM:LDA #0:SEC:SBC AC3%:STA AC3%:LDA #0:SBC AC3%+1:STA AC3%+1
 1320   .DOREM LDA &91:BPL OKEXIT:LDA #0:SEC:SBC AC3%+2:STA AC3%+2:LDA #0:SBC AC3%+3:STA AC3%+3:JMP OKEXIT
 1330   .EREXIT:]:PROCerror("Division by zero"):[OPT O%
 1340   .OKEXIT LDA AC3%:STA AC2%:LDA AC3%+1:STA AC2%+1:LDA AC3%+2:STA AC1%:LDA AC3%+3:STA AC1%+1:RTS
 1350   
 1360   .UDIV LDA #0:STA AC3%+2:STA AC3%+3
 1370   LDA AC1%:ORA AC1%+1:BNE OKUDIV:SEC:RTS
 1380   .OKUDIV LDX #16:.DAVLP ROL (AC3%):ROL (AC3%+1):ROL (AC3%+2):ROL (AC3%+3)
 1390   .CHKLT SEC:LDA AC3%+2:SBC AC1%:TAY:LDA AC3%+3:SBC AC1%+1:BCC DECCNT:STY AC3%+2:STA AC3%+3
 1400   .DECCNT DEX:BNE DAVLP:ROL (AC3%):ROL (AC3%+1):CLC:RTS
 1410   
 1420   .NDIV%
 1430   JSR SDIVMD%:JMP PUSH2%
 1440   
 1450   .NMOD%
 1460   JSR SDIVMD%:JMP PUSH1%
 1470   
 1480   .DUP%
 1490   JSR PULL1%:JSR PUSH1%:JMP PUSH1%
 1500   
 1510   .SWAP%
 1520   JSR PULL1%:JSR PULL2%:JSR PUSH1%:JMP PUSH2%
 1530   
 1540   .NDIVMOD%
 1550   JSR SDIVMD%:JSR PUSH1%:JMP PUSH2%
 1560   
 1570   .NMODDIV%
 1580   JSR SDIVMD%:JSR PUSH2%:JMP PUSH1%
 1590   
 1600   .DISCARD%
 1610   JMP PULL1%
 1620   
 1630   .NVDU%
 1640   JSR PULL1%:LDA AC1%:JMP &FFEE
 1650   
 1660   .NGET%
 1670   JSR &FFE0:STA AC1%:LDA #0:STA AC1%+1:JMP PUSH1%
 1680   
 1690   .NAND%
 1700   JSR PULL1%:JSR PULL2%:LDA AC1%:AND AC2%:STA AC1%:LDA AC1%+1:AND AC2%+1:STA AC1%+1:JMP PUSH1%
 1710   
 1720   .NOR%
 1730   JSR PULL1%:JSR PULL2%:LDA AC1%:ORA AC2%:STA AC1%:LDA AC1%+1:ORA AC2%+1:STA AC1%+1:JMP PUSH1%
 1740   
 1750   .NEOR%
 1760   JSR PULL1%:JSR PULL2%:LDA AC1%:EOR AC2%:STA AC1%:LDA AC1%+1:EOR AC2%+1:STA AC1%+1:JMP PUSH1%
 1770   
 1780   .NNOT%
 1790   JSR PULL1%:LDA AC1%:EOR #255:STA AC1%:LDA AC1%+1:EOR #255:STA AC1%+1:JMP PUSH1%
 1800   
 1810   .SPACE%
 1820   LDA #32:JMP &FFEE
 1830   
 1840   .SP%
 1850   LDA #32:JMP &FFEE
 1860   
 1870   .CR%
 1880   JMP &FFE7
 1890   
 1900   .SPACES%
 1910   JSR PULL1%:.AA LDA AC1%:ORA AC1%+1:BEQ BB:LDA #32:JSR &FFEE:LDA AC1%:SEC:SBC #1:STA AC1%:LDA AC1%+1:SBC #0:STA AC1%+1:JMP AA:.BB RTS
 1920   
 1930   .CHARS%
 1940   JSR PULL1%:JSR PULL2%:.CC LDA AC1%:ORA AC1%+1:BEQ DD:LDA AC2%:JSR &FFEE:LDA AC1%:SEC:SBC #1:STA AC1%:LDA AC1%+1:SBC #0:STA AC1%+1:JMP CC:.DD RTS
 1950   
 1960   .NPRINTON%
 1970   LDA #2:JMP &FFEE
 1980   
 1990   .NPRINTOFF%
 2000   LDA #3:JMP &FFEE
 2010   
 2020   .NADVAL%
 2030   JSR PULL1%:LDA #128:LDX AC1%:LDY AC1%+1:JSR &FFF4:STY AC1%+1:STX AC1%:JMP PUSH1%
 2040   
 2050   .NINKEY%
 2060   JSR PULL1%:LDA #129:LDX AC1%:LDY AC1%+1:JSR &FFF4:STY AC1%+1:STX AC1%:JMP PUSH1%
 2070   
 2080   .NREADCH%
 2090   JSR PULL1%:JSR PULL2%:LDX AC2%:LDY AC1%:LDA #135:JSR &FFF4:STX AC1%:LDA #0:STA AC1%+1:JMP PUSH1%
 2100   
 2110   .INSERT%
 2120   JSR PULL1%:LDA #138:LDX #0:LDY AC1%:JMP &FFF4
 2130   
 2140   .TV%
 2150   JSR PULL1%:JSR PULL2%:LDA #144:LDX AC2%:LDY AC1%:JMP &FFF4
 2160   
 2170   .NTIME%
 2180   LDA #1:LDX #&50:LDY #0:JSR &FFF1
 2190   JMP PUSH1%
 2200   
 2210   .SET_TIME%
 2220   JSR PULL1%
 2230   LDA #2:LDX #&50:LDY #0:JMP &FFF1
 2240   
 2250   ]NEXT
 2260 CDP%=P%
 2270 DATA +,ADD%
 2280 DATA -,SUBTRACT%
 2290 DATA PRINT,OUT%
 2300 DATA *,MULT%
 2310 DATA ABS,NABS%
 2320 DATA DIV,NDIV%
 2330 DATA MOD,NMOD%
 2340 DATA DUP,DUP%
 2350 DATA SWAP,SWAP%
 2360 DATA DIVMOD,NDIVMOD%
 2370 DATA MODDIV,NMODDIV%
 2380 DATA DISCARD,DISCARD%
 2390 DATA VDU,NVDU%
 2400 DATA GET,NGET%
 2410 DATA AND,NAND%
 2420 DATA OR,NOR%
 2430 DATA EOR,NEOR%
 2440 DATA NOT,NNOT%
 2450 DATA SPACE,SPACE%
 2460 DATA SP,SP%
 2470 DATA CR,CR%
 2480 DATA SPACES,SPACES%
 2490 DATA CHARS,CHARS%
 2500 DATA PRINT_ON,NPRINTON%
 2510 DATA PRINT_OFF,NPRINTOFF%
 2520 DATA ADVAL,NADVAL%
 2530 DATA INKEY,NINKEY%
 2540 DATA READCH,NREADCH%
 2550 DATA INSERT,INSERT%
 2560 DATA TV,TV%
 2570 DATA TRUE,NTRUE%
 2580 DATA FALSE,NFALSE%
 2590 DATA =,EQUAL%
 2600 DATA <>,NEQUAL%
 2610 DATA >,GREATER%
 2620 DATA <,LESS%
 2630 DATA <=,LE_EQ%
 2640 DATA >=,GR_EQ%
 2650 DATA TIME,NTIME%
 2660 DATA SET_TIME,SET_TIME%
 2670 DATA *,0
 2680 BUF$=""
 2690 RESTORE 2270
 2700 READ A$,A%
 2710 IF A%=0 THEN GOTO 2790
 2720 $DCP%=A$
 2730 DCP%=DCP%+LEN($DCP%)+1
 2740 ?DCP%=LEN(A$)
 2750 DCP%!1=A%
 2760 DCP%=DCP%+4
 2770 GOTO 2700
 2780 
 2790 TRE%=DCP%
 2800 ENDPROC
 2810 
 2820 
 2830 
 2840 DEF FNword
 2850 LOCAL A$,A%
 2860 IF LEN(BUF$)=0 THEN INPUT LINE "]"BUF$:GOTO 2860
 2870 IF LEFT$(BUF$,1)=" " THEN BUF$=MID$(BUF$,2):GOTO 2860
 2880 A$=BUF$
 2890 A%=INSTR(A$," ")
 2900 IF A%=0 THEN BUF$="":=A$
 2910 BUF$=MID$(BUF$,A%+1)
 2920 =LEFT$(A$,A%-1)
 2930 
 2940 
 2950 
 2960 DEF PROCprocess
 2970 LOCAL P%
 2980 A$=FNword:IF LEN(A$)=0 THEN GOTO 2980
 2990 IF FNnum(A$) THEN PROCpush(VAL(A$)):GOTO 2980
 3000 P%=FNdick(A$)
 3010 IF P%=0 THEN PROCcommand(A$):ENDPROC
 3020 CALL !(P%+LEN($P%)+2)
 3030 ENDPROC
 3040 
 3050 DEF FNdick(A$)
 3060 LOCAL P%
 3070 P%=DCS%
 3080 IF $P%=A$ THEN =P%
 3090 P%=P%+LEN($P%)+5
 3100 IF P%>=DCP% THEN =0
 3110 GOTO 3080
 3120 
 3130 DEF FNnum(A$)
 3140 =STR$(VAL(A$))=A$
 3150 
 3160 DEF PROCpush(A%)
 3170 IF SGN(A%)=-1 THEN A%=65536+A%
 3180 !AC1%=A%:CALL PUSH1%
 3190 ENDPROC
 3200 
 3210 DEF PROCcommand(A$)
 3220 IF A$="VOCAB" THEN PROCVOCAB:ENDPROC
 3230 IF A$="BASIC" THEN CLEAR:END
 3240 IF A$=":" THEN PROCcompile:ENDPROC
 3250 PRINT "No such word as ";A$
 3260 BUF$=""
 3270 ENDPROC
 3280 
 3290 DEF PROCVOCAB
 3300 LOCAL T%
 3310 PRINT "Resident words:"
 3320 T%=DCS%
 3330 PRINT $T%;" ";
 3340 T%=T%+LEN($T%)+5
 3350 IF T%=TRE% THEN PRINT'"User defined words:"
 3360 IF T%>=DCP% THEN PRINT:ENDPROC
 3370 GOTO 3330
 3380 
 3390 DEF PROCcompile
 3400 LOCAL A$,P%,A$,T%
 3410 IF DCP%>=DCE% THEN PRINT'"No dictionary space":BUF$="":ENDPROC
 3420 A$=FNword
 3430 IF FNdick(A$)>0 THEN PRINT'"Word already exists":BUF$="":ENDPROC
 3440 $DCP%=A$
 3450 DCP%=DCP%+LEN(A$)+1
 3460 ?DCP%=LEN(A$)
 3470 DCP%!1=CDP%
 3480 DCP%=DCP%+4
 3490 P%=CDP%
 3500 A$=FNword
 3510 IF FNnum(A$) THEN PROCnumber(VAL(A$)):GOTO 3500
 3520 IF A$=";" THEN [OPT 2:RTS:]:CDP%=P%:ENDPROC
 3530 T%=FNdick(A$)
 3540 IF T%=0 THEN PROCimmed(A$):GOTO 3500
 3550 [OPT 2:JSR !(T%+LEN($T%)+2):]
 3560 IF P%>CDE% THEN PRINT'"Code too long":BUF$="":ENDPROC
 3570 GOTO 3500
 3580 
 3590 DEF PROCnumber(A%)
 3600 IF SGN(A%)=-1 THEN A%=A%+65536
 3610 [OPT 2:LDA #(A% MOD 256):STA AC1%:LDA #(A% DIV 256):STA AC1%+1:JSR PUSH1%:]
 3620 ENDPROC
 3630 
 3640 DEF PROCimmed(A$)
 3650 IF A$="BEGIN" THEN PROCbegin:ENDPROC
 3660 IF A$="END" THEN PROCend:ENDPROC
 3670 PRINT'"No such word as ";A$:BUF$="":ENDPROC
 3680 
 3690 DEF PROCbegin
 3700 !AC1%=P%
 3710 CALL PUSH1%
 3720 ENDPROC
 3730 
 3740 DEF PROCend
 3750 CALL PULL1%
 3760 [OPT 2
 3770 JSR PULL1%:LDA AC1%:ORA AC1%+1:BNE P%+5
 3780 JMP !AC1%
 3790 ]ENDPROC
